const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');

// Clear mongoose cache to prevent OverwriteModelError
mongoose.models = {};
mongoose.modelSchemas = {};

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json());

// Database Connection
mongoose.connect('mongodb://localhost:27017/grocery-shop', {
    useNewUrlParser: true,
    useUnifiedTopology: true
})
.then(() => console.log('📦 Connected to MongoDB'))
.catch(err => console.error('❌ Database connection error:', err));

// Import models AFTER clearing cache
const Product = require('./models/Product');
const Category = require('./models/Category');
const Sale = require('./models/Sale');

// Routes
app.use('/api/products', require('./routes/products'));
app.use('/api/categories', require('./routes/categories'));
app.use('/api/sales', require('./routes/sales'));
app.use('/api/dashboard', require('./routes/dashboard'));
app.use('/api/customers', require('./routes/customers'));


// Basic route
app.get('/', (req, res) => {
    res.json({ 
        message: 'Grocery Shop API is running! 🛒',
        status: 'success'
    });
});

// Add sample data route
app.post('/api/sample-data', async (req, res) => {
    try {
        await Product.deleteMany({});
        
        const sampleProducts = [
            { name: 'Apples', category: 'Fruits', price: 2.99, stock: 50, description: 'Fresh red apples' },
            { name: 'Bananas', category: 'Fruits', price: 1.99, stock: 75, description: 'Ripe yellow bananas' },
            { name: 'Milk', category: 'Dairy', price: 3.49, stock: 30, description: 'Whole milk 1L' },
            { name: 'Bread', category: 'Bakery', price: 2.49, stock: 25, description: 'White bread loaf' },
            { name: 'Chicken Breast', category: 'Meat', price: 8.99, stock: 15, description: 'Fresh chicken breast' },
            { name: 'Coca Cola', category: 'Beverages', price: 1.89, stock: 8, description: '330ml can' },
            { name: 'Potato Chips', category: 'Snacks', price: 3.99, stock: 40, description: 'Original flavor' }
        ];
        
        await Product.insertMany(sampleProducts);
        res.json({ message: 'Sample data added successfully!', count: sampleProducts.length });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

app.listen(PORT, () => {
    console.log(`🚀 Server running on http://localhost:${PORT}`);
});
